plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "me.modmuss50.mod-publish-plugin" version "0.4.0"
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import com.modrinth.minotaur.dependencies.ModDependency

version = mod_version
group = mod_group_id

base {
    archivesName = archivesBaseName
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    generateRunFolders = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=doom.mixins.json"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            taskName 'mcdoom-forge-1.20_client'
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
            taskName 'mcdoom-forge-1.20_server'
        }
    }
}

mixin { 
    add sourceSets.main, "doom.refmap.json"
    config "doom.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven { url 'https://libs.azuredoom.com:4443/mods'}
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://minecraft.curseforge.com/api/maven/" }
    maven { url "https://dl.cloudsmith.io/public/tslat/sbl/maven/" }
    maven { url "https://maven.blamejared.com" }
	maven { url "https://cfa2.cursemaven.com" }
	maven { url "https://maven.shedaniel.me" }
    mavenCentral()
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    implementation fg.deobf("mod.azure.azurelib:azurelib-neo-${minecraft_version}:${azurelib_version}")
  	implementation fg.deobf("net.kyrptonaught.customportalapi:customportalapi-reforged:${customportalsapi}")
	annotationProcessor "org.spongepowered:mixin:0.8.4:processor"
    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
    implementation fg.deobf("curse.maven:REIPC-521393:4611912")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${arch_version}")
	implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-1.20:${sbl_version}")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    curseforge {

    	def curseProp = new Properties()
    	File secretPropsFile = file("key.properties")
    	curseProp.load(secretPropsFile.newInputStream())

    	project {
        	apiKey = curseProp.getProperty('curseKey')
        	id = "${curse_id}"
        	releaseType = "${curse_release}"
        	changelogType = 'text'
        	changelog = file('CHANGELOG.txt')
        	addGameVersion("Forge")
        	addGameVersion("NeoForge")
        	addGameVersion("Java 17")

        	relations {
            	requiredDependency 'curios'  
            	requiredDependency 'azurelib' 
            	requiredDependency 'smartbrainlib'  
            	requiredDependency 'custom-portal-api-reforged'  
            	optionalDependency 'better-combat-by-daedelus' 
        	}
    	}
    }
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = project.modrinth_id
		versionNumber = project.mod_version 
		uploadFile = jar 
		changelog = rootProject.file("changelog.txt").text
		loaders = ['neoforge', 'forge']
		dependencies { 
        	required.project "azurelib"
        	required.project "smartbrainlib"
        	required.project "curios"
        	required.project "custom-portal-api-reforged"
        	optional.project "better-combat"
   		}
	}
}