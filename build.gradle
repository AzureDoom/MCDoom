buildscript {
    repositories {
    	maven { url  = 'https://plugins.gradle.org/m2/' }
    }
}

plugins {
	id 'maven-publish'
	alias(libs.plugins.quilt.loom)
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url "https://cfa2.cursemaven.com" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url 'https://maven.blamejared.com' }
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url "https://api.modrinth.com/maven" }
	maven { url = "https://maven.terraformersmc.com/" }
	maven {url = "https://ladysnake.jfrog.io/artifactory/mods" }
}

dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		addLayer quiltMappings.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:v2")
		// officialMojangMappings() // Uncomment if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
	}
	modImplementation libs.quilt.loader
    modImplementation "software.bernie.geckolib:geckolib-quilt-1.19:3.1.0"
	modImplementation ("com.terraformersmc:modmenu:4.0.0-beta.4") {
        exclude(group: "net.fabricmc.fabric-api")
  		exclude group: "net.fabricmc", module: "fabric-loader"
    }
    modImplementation ("dev.emi:trinkets:3.4.0") {
  		exclude group: "net.fabricmc.fabric-api"
  		exclude group: "net.fabricmc", module: "fabric-loader"
	}
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:9.0.466") {
        exclude(group: "net.fabricmc.fabric-api")
  		exclude group: "net.fabricmc", module: "fabric-loader"
    }
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:9.0.466") {
        exclude(group: "net.fabricmc.fabric-api")
  		exclude group: "net.fabricmc", module: "fabric-loader"
    }
    modApi("dev.architectury:architectury-fabric:5.4.15") {
        exclude(group: "net.fabricmc.fabric-api")
  		exclude group: "net.fabricmc", module: "fabric-loader"
    }
    modApi("me.shedaniel.cloth:cloth-config-fabric:7.0.65") {
        exclude(group: "net.fabricmc.fabric-api")
  		exclude group: "net.fabricmc", module: "fabric-loader"
    }
}

processResources {
	inputs.property "version", version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

tasks.withType(JavaCompile).configureEach {
	it.sourceCompatibility = 17 // for the IDE support
	it.options.encoding = 'UTF-8'
	it.options.release.set(17)
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

loom {
	accessWidenerPath = file("src/main/resources/doom.accesswidener")
}

if (file('key.properties').exists()) {
    curseforge {

    	def curseProp = new Properties()
    	File secretPropsFile = file("key.properties")
    	curseProp.load(secretPropsFile.newInputStream())

    	project {
        	apiKey = curseProp.getProperty('curseKey')
        	id = "${curse_id}"
        	releaseType = "${curse_release}"
        	changelogType = 'text'
        	changelog = file('CHANGELOG.txt')
			addGameVersion("1.19")
			addGameVersion("Quilt")
			addGameVersion("Java 17")

        	relations {
            	requiredDependency 'geckolib'  
            	requiredDependency 'trinkets'  
            	optionalDependency 'roughly-enough-items' 
        	}
        	mainArtifact(remapJar)

        	afterEvaluate {
            	uploadTask.dependsOn("remapJar")
        	}
    	}
    	options {
    		//debug = true
        	forgeGradleIntegration = false
    	}
    }
}