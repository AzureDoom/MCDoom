plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle'
    id 'org.spongepowered.mixin'
    id "me.modmuss50.mod-publish-plugin" version "0.4.0"
}

base {
    archivesName = "${mod_name}-neo-${minecraft_version}"
}

mixin {
    add(sourceSets.main, "doom.refmap.json")

    config("doom.mixins.json")
    config("doom.forge.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven { url 'https://libs.azuredoom.com:4443/mods' }
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://minecraft.curseforge.com/api/maven/" }
    maven { url "https://dl.cloudsmith.io/public/tslat/sbl/maven/" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://cfa2.cursemaven.com" }
    maven { url "https://maven.shedaniel.me" }
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://api.modrinth.com/maven' }
    maven { url "https://maven.terraformersmc.com/" }
    maven { url "https://maven.terraformersmc.com/releases" } // modmenu
    mavenCentral()
}

dependencies {
    implementation project(path: ':common')
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    implementation fg.deobf("mod.azure.azurelib:azurelib-neo-${minecraft_version}:${azurelib_version}")
    implementation fg.deobf("net.kyrptonaught.customportalapi:customportalapi-reforged:${customportalsapireforged}")
    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
    implementation fg.deobf("curse.maven:REIPC-521393:4611912")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${arch_version}")
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-neoforge-${minecraft_version}:${sbl_version}")
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.1"))
    implementation fg.deobf('maven.modrinth:better-combat:hNenqXi9')
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${project.player_anim_version}")
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

if (file('key.properties').exists()) {
    publishMods {
        def releaseProp = new Properties()
        File secretPropsFile = file("key.properties")
        releaseProp.load(secretPropsFile.newInputStream())
        file = jar.archiveFile
        changelog = rootProject.file("changelog.txt").text
        type = STABLE
        modLoaders.add("neoforge")
        modLoaders.add("forge")

        curseforge {
            projectId = project.curse_id
            projectSlug = project.projectSlug
            accessToken = releaseProp.getProperty("curseKey")
            minecraftVersions.add("${minecraft_version}")
            requires {
                slug = "azurelib"
            }
            requires {
                slug = "curios"
            }
            requires {
                slug = "smartbrainlib"
            }
            requires {
                slug = "custom-portal-api-reforged"
            }
        }
        modrinth {
            projectId = project.modrinth_id
            accessToken = releaseProp.getProperty('modrinthKey')
            minecraftVersions.add("${minecraft_version}")
            requires {
                slug = "azurelib"
            }
            requires {
                slug = "curios"
            }
            requires {
                slug = "smartbrainlib"
            }
            requires {
                slug = "custom-portal-api-reforged"
            }
        }
    }
}